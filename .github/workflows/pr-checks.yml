name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: '0'

jobs:
  # Quick checks for PRs
  pr-checks:
    name: PR Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linting
        run: yarn lint

      - name: Check formatting
        run: yarn format:check

      - name: Type check
        run: yarn tsc --noEmit

      - name: Run unit tests
        run: yarn test

      - name: Build check
        run: yarn build

  # Visual regression tests for PRs
  visual-checks:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Install Playwright browsers
        run: yarn playwright install --with-deps

      - name: Build Storybook
        run: yarn build-storybook

      - name: Run visual tests
        run: yarn test:visual

      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results-pr
          path: |
            test-results/
            playwright-report/
          retention-days: 3

  # Chromatic visual testing for PRs
  chromatic-checks:
    name: Chromatic Visual Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build Storybook
        run: yarn build-storybook

      - name: Run Chromatic tests
        run: yarn chromatic --exit-zero-on-changes
        env:
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

  # Comment on PR with results
  pr-comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [pr-checks, visual-checks, chromatic-checks]
    if: always()
    steps:
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const prChecks = '${{ needs.pr-checks.result }}';
            const visualChecks = '${{ needs.visual-checks.result }}';
            const chromaticChecks = '${{ needs.chromatic-checks.result }}';

            const getStatus = (result) => {
              switch(result) {
                case 'success': return '✅ Passed';
                case 'failure': return '❌ Failed';
                case 'cancelled': return '⏹️ Cancelled';
                case 'skipped': return '⏭️ Skipped';
                default: return '⏳ Running';
              }
            };

            const comment = `
            ## 🔍 Pull Request Test Results

            | Test Type | Status |
            |-----------|--------|
            | **Code Quality** | ${getStatus(prChecks)} |
            | **Visual Regression** | ${getStatus(visualChecks)} |
            | **Chromatic Tests** | ${getStatus(chromaticChecks)} |

            ---

            ### 📋 Test Details
            - **Linting**: ESLint checks for code quality
            - **Formatting**: Prettier formatting validation
            - **Type Check**: TypeScript type checking
            - **Unit Tests**: Jest unit test suite
            - **Build Check**: Production build verification
            - **Visual Tests**: Playwright visual regression tests
            - **Chromatic**: Storybook visual testing

            Check the [Actions tab](https://github.com/${{ github.repository }}/actions) for detailed logs and artifacts.
            `;

            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Pull Request Test Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                issue_number: context.issue.number,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                issue_number: context.issue.number,
                body: comment
              });
            }
